# Feature 09: Counter

> **Hinweis**: Die Code-Beispiele in dieser Spec sind framework-neutral. Siehe [00-framework-adaption-guide.md](00-framework-adaption-guide.md) für die Übersetzung in Angular, Vue oder React.

## Ziel
Anzeige der Anzahl aktiver (nicht erledigter) Todos mit korrekter Pluralisierung.

## Beschreibung
Ein Counter im Footer-Bereich zeigt die Anzahl der aktiven Todos an. Die Anzeige muss korrekt pluralisiert werden: "1 item left", "2 items left", "0 items left".

## Akzeptanzkriterien

### Counter-Anzeige
- [ ] Counter zeigt nur aktive (nicht completed) Todos
- [ ] Anzahl ist in `<strong>` Tag eingeschlossen
- [ ] Korrekte Pluralisierung: "1 item left", "2 items left"
- [ ] Counter aktualisiert sich automatisch bei Änderungen

### Reaktive Updates
- [ ] Neues Todo erstellt → Counter +1
- [ ] Todo als completed markiert → Counter -1
- [ ] Todo als active markiert → Counter +1
- [ ] Todo gelöscht → Counter angepasst je nach Status

### UI-Platzierung
- [ ] Counter im Footer-Bereich
- [ ] Footer nur sichtbar wenn Todos vorhanden

## Technische Spezifikationen

### TodoCounter-Komponente

**Template-Struktur:**
```html
<span class="todo-count">
  <strong>{{ activeCount }}</strong> 
  {{ activeCount === 1 ? 'item' : 'items' }} left!
</span>
```

**Komponenten-Logik:**
```typescript
export class TodoCounterComponent {
  activeCount = 0;
  
  constructor(private todoService: TodoService) {}
  
  onComponentInit(): void {
    // Subscribe to todos and calculate active count
    this.todoService.getTodos().subscribe(todos => {
      this.activeCount = todos.filter(todo => !todo.completed).length;
    });
  }
  
  onComponentDestroy(): void {
    // Cleanup subscriptions
    this.unsubscribeAll();
  }
}
```

### TodoAppComponent Update
```typescript
// Komponenten-Definition:
  selector: 'app-todo',
  template: `
    <section class="todoapp">
      <header class="header">
        <h1>todos</h1>
        <input 
          class="new-todo" 
          placeholder="What needs to be done?" 
          autofocus
          [bound zu newTodoTitle"
          [keyup.enter event -> createTodo()"
        >
      </header>
      
      <app-todo-list></app-todo-list>
      
      <footer class="footer" [anzeigen wenn hasTodos">
        <app-todo-counter></app-todo-counter>
        <!-- Filter und Clear Completed kommen später -->
      </footer>
    </section>
  `
})
export class TodoAppComponent implements OnInit, OnDestroy {
  newTodoTitle = '';
  hasTodos = false;
  private subscription = new Subscription();
  
  constructor(private todoService: TodoService) {}
  
  ngOnInit(): void {
    this.subscription.add(
      this.todoService.getTodos().subscribe(todos => {
        this.hasTodos = todos.length > 0;
      })
    );
  }
}
```

### TodoService Update (für reactive state)
```typescript
// Service/Store-Definition:)
export class TodoService {
  private todos$ = new BehaviorSubject<Todo[]>([]);
  
  getTodos(): Observable<Todo[]> {
    return this.todos$.asObservable();
  }
  
  getActiveCount(): Observable<number> {
    return this.todos$.pipe(
      map(todos => todos.filter(todo => !todo.completed).length)
    );
  }
  
  getCompletedCount(): Observable<number> {
    return this.todos$.pipe(
      map(todos => todos.filter(todo => todo.completed).length)
    );
  }
  
  // Existing methods ensure todos$ is always updated
}
```

## Testfälle

### Counter-Logik
- [ ] 0 aktive Todos → "0 items left!"
- [ ] 1 aktives Todo → "1 item left!"
- [ ] 2 aktive Todos → "2 items left!"
- [ ] 10 aktive Todos → "10 items left!"

### Reactive Updates
- [ ] Neues aktives Todo erstellt → Counter erhöht sich
- [ ] Aktives Todo als completed markiert → Counter verringert sich
- [ ] Completed Todo als active markiert → Counter erhöht sich
- [ ] Aktives Todo gelöscht → Counter verringert sich
- [ ] Completed Todo gelöscht → Counter unverändert

### Edge Cases
- [ ] Alle Todos completed → "0 items left!"
- [ ] Alle Todos gelöscht → Counter nicht sichtbar (kein Footer)
- [ ] Sehr große Zahlen → Korrekte Anzeige ohne Formatierungsfehler

### Mixed Operations
- [ ] 3 aktive, 2 completed → "3 items left!"
- [ ] Bulk toggle all → Counter aktualisiert korrekt
- [ ] Bulk delete completed → Counter unverändert

### Performance
- [ ] 1000+ Todos → Counter berechnet effizient
- [ ] Frequent updates → Keine memory leaks
- [ ] Change detection optimized

## CSS-Styling (aus main.css)
```css
.footer {
  color: #777;
  padding: 10px 15px;
  height: 20px;
  text-align: center;
  border-top: 1px solid #e6e6e6;
}

.todo-count {
  float: left;
  text-align: left;
}

.todo-count strong {
  font-weight: 300;
}
```

## Definition of Done
- [ ] Counter zeigt korrekte Anzahl aktiver Todos
- [ ] Pluralisierung funktioniert für alle Zahlen
- [ ] Reactive updates bei allen Todo-Operationen
- [ ] Footer wird nur bei vorhandenen Todos angezeigt
- [ ] Performance optimiert (keine unnötigen Berechnungen)
- [ ] Memory leak prevention (proper unsubscribe)
- [ ] Unit Tests für Counter-Logik
- [ ] Integration Tests mit Todo-Operations
- [ ] Accessibility: Screen reader friendly

## Zusätzliche Überlegungen

### Performance Optimization
```typescript
// Memoized counter calculation
// Komponenten-Definition:
  selector: 'app-todo-counter',
  template: `
    <span class="todo-count">
      <strong>{{ activeCount$ | async }}</strong> 
      {{ itemText$ | async }} left!
    </span>
  `
})
export class TodoCounterComponent {
  activeCount$ = this.todoService.getActiveCount();
  
  itemText$ = this.activeCount$.pipe(
    map(count => count === 1 ? 'item' : 'items')
  );
  
  constructor(private todoService: TodoService) {}
}
```

## Abhängigkeiten
- 06-toggle-todo.md (Toggle beeinflusst Counter)
- 07-delete-todo.md (Delete beeinflusst Counter)
- 04-create-todo.md (Create beeinflusst Counter)
- 05-display-todos.md (TodoService mit reactive state)

## Nachfolgende Features
- 10-filter-todos.md (Filter nutzen Counter-Logik)
- 11-toggle-all.md (Toggle All nutzt Counter)
- 12-clear-completed.md (Clear Completed beeinflusst Counter)