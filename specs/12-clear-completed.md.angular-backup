# Feature 12: Erledigte löschen

> **Hinweis**: Die Code-Beispiele in dieser Spec sind framework-neutral. Siehe [00-framework-adaption-guide.md](00-framework-adaption-guide.md) für die Übersetzung in Angular, Vue oder React.
## Ziel
"Clear Completed" Button zum Löschen aller erledigten Todos mit automatischer Sichtbarkeits-Kontrolle.

## Beschreibung
Ein "Clear Completed" Button im Footer-Bereich entfernt alle erledigten Todos auf einmal. Der Button ist nur sichtbar, wenn mindestens ein completed Todo existiert.

## Akzeptanzkriterien

### Button-Sichtbarkeit
- [ ] Button nur sichtbar wenn mind. 1 completed Todo existiert
- [ ] Button versteckt wenn keine completed Todos vorhanden
- [ ] Button automatisch versteckt nach dem Löschen aller completed Todos

### Lösch-Funktionalität
- [ ] Klick entfernt alle completed Todos sofort
- [ ] Optimistic Update (sofortige UI-Aktualisierung)
- [ ] Backend-Synchronisation über `DELETE /api/todos/completed`
- [ ] Active Todos bleiben unverändert

### UI-Updates nach Clear
- [ ] Toggle-All Checkbox wird zurückgesetzt (unchecked)
- [ ] Counter zeigt weiterhin aktive Todos
- [ ] Filter bleiben funktional (z.B. "Completed" zeigt leere Liste)

## Technische Spezifikationen

### ClearCompletedComponent
```typescript
// Komponenten-Definition:
  selector: 'app-clear-completed',
  template: `
    <button 
      class="clear-completed"
      [anzeigen wenn completedCount > 0"
      [disabled]="isClearing"
      [click event -> clearCompleted()"
    >
      Clear completed
    </button>
  `
})
export class ClearCompletedComponent implements OnInit, OnDestroy {
  completedCount = 0;
  isClearing = false;
  private subscription = new Subscription();
  
  constructor(private todoService: TodoService) {}
  
  ngOnInit(): void {
    this.subscription.add(
      this.todoService.getCompletedCount().subscribe(count => {
        this.completedCount = count;
      })
    );
  }
  
  ngOnDestroy(): void {
    this.subscription.unsubscribe();
  }
  
  clearCompleted(): void {
    if (this.isClearing || this.completedCount === 0) return;
    
    this.isClearing = true;
    
    this.todoService.clearCompleted().subscribe({
      next: () => {
        this.isClearing = false;
      },
      error: (error) => {
        this.isClearing = false;
        // Show error message
      }
    });
  }
}
```

### TodoService Clear Completed
```typescript
// Service/Store-Definition:)
export class TodoService {
  
  clearCompleted(): Observable<Todo[]> {
    const todos = this.todos$.value;
    const completedTodos = todos.filter(todo => todo.completed);
    
    if (completedTodos.length === 0) {
      return of(todos); // Nothing to clear
    }
    
    // Optimistic update - remove completed todos
    const activeTodos = todos.filter(todo => !todo.completed);
    this.todos$.next(activeTodos);
    
    return this.http.delete<void>(`${this.apiUrl}/completed`).pipe(
      map(() => activeTodos),
      catchError(error => {
        // Rollback optimistic update
        this.todos$.next(todos);
        throw error;
      })
    );
  }
  
  getCompletedCount(): Observable<number> {
    return this.todos$.pipe(
      map(todos => todos.filter(todo => todo.completed).length)
    );
  }
  
  hasCompletedTodos(): Observable<boolean> {
    return this.getCompletedCount().pipe(
      map(count => count > 0)
    );
  }
}
```

### Backend Clear Completed Endpoint
```java
@DeleteMapping("/completed")
public ResponseEntity<Void> clearCompletedTodos() {
    List<Todo> completedTodos = todoStorage.findAll()
        .stream()
        .filter(Todo::isCompleted)
        .collect(Collectors.toList());
    
    completedTodos.forEach(todo -> todoStorage.deleteById(todo.getId()));
    
    return ResponseEntity.noContent().build();
}
```

### Footer Component Integration
```typescript
// Komponenten-Definition:
  selector: 'app-todo-footer',
  template: `
    <footer class="footer" [anzeigen wenn hasTodos">
      <app-todo-counter></app-todo-counter>
      <app-todo-filter></app-todo-filter>
      <app-clear-completed></app-clear-completed>
    </footer>
  `
})
export class TodoFooterComponent implements OnInit, OnDestroy {
  hasTodos = false;
  private subscription = new Subscription();
  
  constructor(private todoService: TodoService) {}
  
  ngOnInit(): void {
    this.subscription.add(
      this.todoService.getTodos().subscribe(todos => {
        this.hasTodos = todos.length > 0;
      })
    );
  }
  
  ngOnDestroy(): void {
    this.subscription.unsubscribe();
  }
}
```

## Testfälle

### Button Visibility
- [ ] Keine completed Todos → Button nicht sichtbar
- [ ] 1 completed Todo → Button sichtbar
- [ ] Nur active Todos → Button nicht sichtbar
- [ ] Mix aus active/completed → Button sichtbar

### Clear Functionality
- [ ] 3 completed, 2 active → Clear → Nur 2 active bleiben
- [ ] Nur completed Todos → Clear → Liste wird leer
- [ ] Keine completed Todos → Clear Button nicht verfügbar

### UI State Updates
- [ ] Clear completed → Toggle-All wird unchecked
- [ ] Clear completed → Counter zeigt nur noch active
- [ ] Clear completed → "Completed" Filter zeigt leere Liste
- [ ] Clear completed → Button wird automatisch versteckt

### Backend Integration
- [ ] Clear → DELETE Request an `/api/todos/completed`
- [ ] Backend Success → Completed Todos entfernt
- [ ] Backend Error → Rollback der optimistischen Updates
- [ ] Network Error → Retry-Mechanismus

### Optimistic Updates
- [ ] Click → Completed Todos sofort aus UI entfernt
- [ ] Backend Success → Zustand bleibt
- [ ] Backend Error → Completed Todos wieder angezeigt

### Edge Cases
- [ ] Clear während Toggle-Operation → Serialisierung
- [ ] Clear während Edit-Modus → Edit abbrechen
- [ ] Sehr viele completed Todos → Performance

### Integration Tests
- [ ] Clear + sofort neues Todo erstellen → Korrekte Anzeige
- [ ] Clear + Filter wechseln → Konsistente Darstellung
- [ ] Clear + Toggle einzelnes Todo → Toggle-All korrekt

## CSS-Styling (aus main.css)
```css
.clear-completed {
  float: right;
  position: relative;
  line-height: 20px;
  text-decoration: none;
  cursor: pointer;
}

.clear-completed:hover {
  text-decoration: underline;
}

.clear-completed:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}
```

## Advanced Features

### Confirmation Dialog (Optional)
```typescript
clearCompleted(): void {
  if (this.completedCount > 5) {
    // Show confirmation for large deletions
    const confirmed = confirm(`Delete ${this.completedCount} completed todos?`);
    if (!confirmed) return;
  }
  
  // Proceed with clearing
}
```

### Undo Functionality (Optional)
```typescript
clearCompleted(): void {
  const completedTodos = this.todos$.value.filter(todo => todo.completed);
  
  this.todoService.clearCompleted().subscribe({
    next: () => {
      // Show undo notification
      this.showUndoNotification(completedTodos);
    }
  });
}

private showUndoNotification(deletedTodos: Todo[]): void {
  // Show toast with undo option
  const undoRef = this.snackBar.open(
    `${deletedTodos.length} todos deleted`, 
    'UNDO', 
    { duration: 5000 }
  );
  
  undoRef.onAction().subscribe(() => {
    this.restoreDeletedTodos(deletedTodos);
  });
}
```

### Batch Processing for Large Lists
```typescript
clearCompleted(): Observable<Todo[]> {
  const todos = this.todos$.value;
  const completedTodos = todos.filter(todo => todo.completed);
  
  if (completedTodos.length > 100) {
    // Process in chunks for better performance
    return this.clearCompletedInBatches(completedTodos);
  }
  
  return this.clearCompletedSimple();
}
```

## Definition of Done
- [ ] Button nur bei vorhandenen completed Todos sichtbar
- [ ] Clear entfernt alle completed Todos sofort
- [ ] Backend Integration über DELETE /api/todos/completed
- [ ] Optimistic Updates mit Rollback-Mechanismus
- [ ] Toggle-All wird nach Clear zurückgesetzt
- [ ] Counter und Filter bleiben korrekt
- [ ] Performance optimiert für viele Todos
- [ ] Error handling für alle Szenarien
- [ ] Unit Tests für Clear-Logic
- [ ] Integration Tests mit anderen Features
- [ ] Accessibility: Button proper labeling

## Abhängigkeiten
- 11-toggle-all.md (Toggle-All wird nach Clear zurückgesetzt)
- 09-counter.md (Counter Updates nach Clear)
- 10-filter-todos.md (Filter reagieren auf Clear)
- 07-delete-todo.md (Einzelnes Löschen als Basis)
- 02-todo-model.md (Backend DELETE /api/todos/completed)

## Nachfolgende Features
- 13-ui-states.md (UI States für leere Listen)
- 14-integration.md (Vollständige Frontend-Backend Integration)