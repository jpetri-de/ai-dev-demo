# TodoMVC Production Configuration for Docker
# This configuration is optimized for containerized deployments

# ===================================
# Server Configuration
# ===================================
server.port=8080
server.address=0.0.0.0
server.servlet.context-path=/
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=30s

# Compression
server.compression.enabled=true
server.compression.mime-types=application/json,text/css,text/javascript,text/html,application/javascript
server.compression.min-response-size=1024

# ===================================
# Logging Configuration
# ===================================
logging.level.com.example.todobackend=INFO
logging.level.org.springframework=WARN
logging.level.org.springframework.web=INFO
logging.level.org.springframework.security=WARN
logging.level.org.hibernate=WARN

# Log format for containers
logging.pattern.console=%d{HH:mm:ss.SSS} [%thread] %-5level [%logger{36}] - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%logger{36}] - %msg%n

# Log files
logging.file.name=/app/logs/application.log
logging.file.max-size=100MB
logging.file.max-history=30
logging.file.total-size-cap=3GB

# ===================================
# Actuator Configuration
# ===================================
management.endpoints.web.exposure.include=health,metrics,info,prometheus
management.endpoints.web.base-path=/actuator
management.endpoint.health.show-details=when-authorized
management.endpoint.health.show-components=always
management.health.defaults.enabled=true

# Health indicators
management.health.diskspace.enabled=true
management.health.diskspace.threshold=100MB

# Metrics
management.metrics.export.prometheus.enabled=true
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.distribution.percentiles.http.server.requests=0.5,0.95,0.99
management.metrics.tags.application=todoapp
management.metrics.tags.environment=production

# Info endpoint
management.info.git.mode=full
management.info.build.enabled=true
management.info.env.enabled=true

# ===================================
# Security Configuration
# ===================================
# CORS configuration (restrict in production)
app.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:https://yourdomain.com}
app.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
app.cors.allowed-headers=Content-Type,Authorization,X-Requested-With
app.cors.max-age=3600

# Security headers
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.same-site=strict

# ===================================
# Application Configuration
# ===================================
# Todo settings
app.todos.max-title-length=500
app.todos.max-count=1000

# Rate limiting
app.rate-limit.enabled=true
app.rate-limit.requests-per-minute=100
app.rate-limit.burst-capacity=20

# ===================================
# Performance Configuration
# ===================================
# Connection timeout
server.servlet.session.timeout=30m

# Thread pool
server.tomcat.threads.min-spare=10
server.tomcat.threads.max=200
server.tomcat.accept-count=100
server.tomcat.max-connections=8192

# Keep-alive
server.tomcat.keep-alive-timeout=20000
server.tomcat.max-keep-alive-requests=100

# ===================================
# Monitoring and Observability
# ===================================
# Request correlation
app.tracing.correlation-id.enabled=true
app.tracing.correlation-id.header-name=X-Correlation-ID

# Performance monitoring
app.monitoring.performance.enabled=true
app.monitoring.performance.slow-request-threshold=1000

# Error tracking
app.monitoring.errors.enabled=true
app.monitoring.errors.include-stack-trace=false

# ===================================
# Environment-specific Overrides
# ===================================
# These can be overridden by environment variables

# Database configuration (for future use)
# spring.datasource.url=${DATABASE_URL:jdbc:h2:mem:testdb}
# spring.datasource.username=${DATABASE_USERNAME:sa}
# spring.datasource.password=${DATABASE_PASSWORD:}

# External service URLs
# app.external.notification-service.url=${NOTIFICATION_SERVICE_URL:}
# app.external.analytics-service.url=${ANALYTICS_SERVICE_URL:}

# Feature flags
app.features.toggle-all.enabled=true
app.features.clear-completed.enabled=true
app.features.counter.enabled=true
app.features.filters.enabled=true

# ===================================
# Docker-specific Configuration
# ===================================
# JVM settings are handled in Dockerfile
# Container health checks use actuator endpoints
# Logs are written to stdout and files for container orchestration